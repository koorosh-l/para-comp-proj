* Introduction
This repository contains the first phase of our project for parallel computing project.
The goal is to create two randomly sized matrices field with random elements called M1 and M2, and compute a third matrix called M3 with dimensions equal to m1 using the following formula:

M_{3}[i][j] = \sum_{x = 0}^{M_2.j} \sum_{y}^{M_2.i} M_2[x][y] \times M_1[i+x][j+y]

* Running
compile with
#+begin_src shell
  make
  ./ugly
  ./phase1
  ./phase2
#+end_src
phase1 is the algorithm written linearly.


phase2 is a nice parallel form of the algorithm which distributes the jobs evenly across the number of threads returned by nproc.

ugly is the parallel version as specified in the phase2 doc.

unfortunately I don't think there is a good way of rewriting so that we are not always blocking one might create another thread that prints m3 repeatedly (and clears) the screen but the operation is finishes really fast and so the changes are not predictably visible in the outputs and solving this issue requires so much locking that our program is going to be sequential, also if the dimensions of m1 are too big then program always segfaults since para_matrix_map defines and array of threads on the stack, this can be fixed but realistically how plausible is it that we might want to create one thread for each cell of m1.

* internals
There are three source files in src proj.c is the actual code for the project and targets ugly, phase2 and phase1 are compiled from this file, matrix.c and matrix.h define a tiny matrix library, matrix.c compiles to libmatrix.so and output binaries are dynamically linked against this library(using -rpath so we don't have to modify LD_LIBRARY_PATH).

** libmatrix.so
libmatrix.so is written in a way that functions and structures don't assume anything about the size of the fields of our matrix so we can easily store any data type in there even other matrices.

*** functions
**** create_matrix
**** free_matrix
**** matrix_copy
**** matref
**** matrix_map
**** para_matrix_map

*** macros
*** structs

** proj.c

